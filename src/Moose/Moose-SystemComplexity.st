Object subclass: #MyChecker	instanceVariableNames: 'model'	classVariableNames: ''	package: 'SummerSchool'!!MyChecker methodsFor: 'testing' stamp: 'nour 9/5/2023 18:07'!computeHierarchyDepth: aClass	| root entity depth |	root := self rootOf: aClass.	entity := root.	depth := 0.	[ entity isNil ] whileFalse: [ 		entity := (entity subInheritances collect: #subclass) detectMax: [ :each | 			          each subclassHierarchy size ].		depth := depth + 1 ].	^ depth! !!MyChecker methodsFor: 'testing' stamp: 'nour 9/5/2023 18:04'!rootOf: aClass	| class |	class := aClass.		 [class superclass isNil or: [ class superclass name = 'Object' ] ] whileFalse: [ class := class superclass ].	^ class! !!MyChecker methodsFor: 'testing' stamp: 'nour 9/4/2023 19:52'!computeClassDepth: aClass	| depth class |	depth := 0.	class := aClass.	[ 	(class superInheritances collect: #superclass) anySatisfy: [ :each | 		each isObjectClass ] ] whileFalse: [ 		depth := depth + 1.		class := (class superInheritances select: [ :each | 			          each superclass isObjectClass ]) ifEmpty: [ 			         (class superInheritances collect: #superclass) detect: [ 				         :each | each superclass isClass ] ] ].	^ depth! !!MyChecker methodsFor: 'testing' stamp: 'nour 9/5/2023 11:47'!isBigClass: aClass 	^ aClass methods size > self bigClassThresHold! !!MyChecker methodsFor: 'testing' stamp: 'nour 9/5/2023 13:52'!regexType: aString 		^ model allModelClasses select: [ :class | aString asRegex matches: class name ]! !!MyChecker methodsFor: 'testing' stamp: 'nour 9/5/2023 11:46'!isOverloading: aClass	| methodGroups |	methodGroups := aClass methods groupedBy: [ :each | each name ].	^ methodGroups anySatisfy: [ :group | 		  group size > self overloadingThreshold  ]! !!MyChecker methodsFor: 'accessing' stamp: 'nour 9/5/2023 11:47'!bigClassThresHold 	^ 10! !!MyChecker methodsFor: 'accessing' stamp: 'nour 9/4/2023 17:55'!model 	^ model! !!MyChecker methodsFor: 'accessing' stamp: 'nour 9/4/2023 17:55'!model: aModel 	model := aModel ! !!MyChecker methodsFor: 'accessing' stamp: 'nour 9/5/2023 11:07'!overloadingThreshold	^ 2! !SpPresenter subclass: #SystemComplexityUI	instanceVariableNames: 'classInput drawButton roassalView modelInput'	classVariableNames: ''	package: 'SummerSchool'!!SystemComplexityUI methodsFor: 'drawing' stamp: 'nour 9/5/2023 19:10'!drawMooseSystemComplexityOf: aClassName	| hierarchy abstract |	hierarchy := self getHierarchyOf: aClassName.	hierarchy do: [ :c | 		| box |		box := RSBox new model: c.		box when: RSMouseClick do: [ box model inspect ] for: box.		box			when: RSMouseEnter			do: [ 				box @ (RSPopup text:					 'Name: ' , box model name asString , String cr					 , 'Number of methods: ' , box model methods size asString					 , String cr , 'Number of attributes: '					 , box model attributes size asString , String cr					 , 'Number of lines of code: '					 , box model numberOfLinesOfCode asString) ]			for: box.		"	box when: RSMouseEnter do: [ box color: Color blue ] for: box.	box when: RSMouseLeave do: [ box color: Color  ] for: box."		roassalView canvas add: box ].	RSLineBuilder verticalBezier withVerticalAttachPoint		shapes: roassalView canvas nodes;		connectToAll: #subclassHierarchy.	RSNormalizer height		shapes: roassalView canvas nodes;		normalize: #numberOfMethods.	RSNormalizer width		shapes: roassalView canvas nodes;		from: 6;		to: 20;		normalize: #numberOfAttributes.	"A class color goes from gray to red, indicating the number of lines of code"	RSNormalizer color		shapes: roassalView canvas nodes;		from: Color gray;		to: Color red;		normalize: #numberOfLinesOfCode.	abstract := roassalView canvas nodes select: [ :n | 		            n model isAbstract ].	abstract do: [ :each | each color: Color green ].	RSTreeLayout on: roassalView canvas nodes.	roassalView canvas @ RSZoomToFitCanvasInteraction.	roassalView canvas @ RSZoomableCanvasInteraction.	roassalView canvas @ RSDraggable! !!SystemComplexityUI methodsFor: 'drawing' stamp: 'nour 9/5/2023 19:12'!drawPharoSystemComplexityOf: aClassName	| hierarchy abstract |	hierarchy := self getHierarchyOf: aClassName.	hierarchy do: [ :c | 		| box |		box := RSBox new model: c.		box when: RSMouseClick do: [ box model inspect ] for: box.		box			when: RSMouseEnter			do: [ 				box @ (RSPopup text:					 'Name: ' , box model name asString , String cr					 , 'Number of methods: ' , box model methods size asString					 , String cr , 'Number of attributes: '					 , 'Number of lines of code: ' , box model linesOfCode asString) ]			for: box.		"	box when: RSMouseEnter do: [ box color: Color blue ] for: box.	box when: RSMouseLeave do: [ box color: Color  ] for: box."		roassalView canvas add: box ].	RSLineBuilder verticalBezier withVerticalAttachPoint		shapes: roassalView canvas nodes;		connectToAll: #subclasses.	RSNormalizer height		shapes: roassalView canvas nodes;		normalize: #numberOfMethods.	RSNormalizer width		shapes: roassalView canvas nodes;		from: 6;		to: 20;		normalize: #numberOfVariables.	"A class color goes from gray to red, indicating the number of lines of code"	RSNormalizer color		shapes: roassalView canvas nodes;		from: Color gray;		to: Color red;		normalize: #numberOfLinesOfCode.	abstract := roassalView canvas nodes select: [ :n | 		            n model isAbstract ].	abstract do: [ :each | each color: Color green ].	RSTreeLayout on: roassalView canvas nodes.	roassalView canvas @ RSZoomToFitCanvasInteraction.	roassalView canvas @ RSZoomableCanvasInteraction.	roassalView canvas @ RSDraggable! !!SystemComplexityUI methodsFor: 'drawing' stamp: 'nour 9/5/2023 18:37'!drawSystemComplexityOf: aClassName	roassalView canvas nodes copy do: #remove.	modelInput text		ifEmpty: [ self drawPharoSystemComplexityOf: aClassName ]		ifNotEmpty: [ self drawMooseSystemComplexityOf: aClassName ].	! !!SystemComplexityUI methodsFor: 'initialization' stamp: 'nour 9/5/2023 15:37'!connectPresenters 	drawButton action: [ self drawSystemComplexityOf: classInput text ]! !!SystemComplexityUI methodsFor: 'initialization' stamp: 'nour 9/5/2023 16:12'!initializePresenter	super initializePresenter.	modelInput := self newTextInput.	modelInput placeholder: 'Model Number'.	classInput := self newTextInput.	classInput placeholder: 'Enter Class Name'.	drawButton := self newButton.	drawButton label: 'Draw'.	roassalView := self newRoassal! !!SystemComplexityUI methodsFor: 'initialization' stamp: 'nour 9/5/2023 18:11'!getHierarchyOf: aClassName	| class model |	modelInput text		ifEmpty: [ 			class := (Smalltalk at: aClassName asSymbol) ifNil: [  ].			^ class withAllSubclasses ]		ifNotEmpty: [ 			model := MooseModelRoot root at: modelInput text asInteger.			class := model allModelClasses				         detect: [ :c | c name = aClassName ]				         ifNone: [ 					 ].			^ class subclassHierarchy				  add: class;				  yourself ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SystemComplexityUI class	instanceVariableNames: ''!!SystemComplexityUI class methodsFor: 'layout' stamp: 'nour 9/5/2023 16:17'!defaultLayout	^ SpBoxLayout newTopToBottom		  add: (SpBoxLayout newLeftToRight				   spacing: 5;				   add: #modelInput width: self labelWidth;				   add: (SpBoxLayout newTopToBottom						    spacing: 2;						    add: #classInput;						    add: #drawButton height: self buttonHeight;						    yourself);				   yourself)		  height: self toolbarHeight * 2;		  add: #roassalView;		  yourself! !!SystemComplexityUI class methodsFor: 'accessing' stamp: 'nour 9/5/2023 16:26'!title 	^ 'System Complexity'! !